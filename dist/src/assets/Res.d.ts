import { Object3D } from "../core/entities/Object3D";
import { Texture } from "../gfx/graphics/webGpu/core/texture/Texture";
import { LoaderFunctions } from "../loader/LoaderFunctions";
import { BitmapTexture2D } from "../textures/BitmapTexture2D";
import { HDRTextureCube } from "../textures/HDRTextureCube";
import { GLTF_Info } from "../loader/parser/gltf/GLTFInfo";
import { Uint8ArrayTexture } from "../textures/Uint8ArrayTexture";
import { GUISprite } from "../components/gui/core/GUISprite";
import { GUITexture } from "../components/gui/core/GUITexture";
import { GUIAtlasTexture } from "../components/gui/core/GUIAtlasTexture";
import { FontInfo } from "../loader/parser/FontParser";
import { Material } from "../materials/Material";
import { Parser } from "../util/Global";
import { ParserBase } from "../loader/parser/ParserBase";
import { GeometryBase } from "../core/geometry/GeometryBase";
import { LitMaterial } from "../materials/LitMaterial";
export declare class Res {
    private _texturePool;
    private _materialPool;
    private _prefabPool;
    private _gltfPool;
    private _geometryPool;
    private _atlasList;
    private _obj;
    constructor();
    getGltf(url: string): GLTF_Info;
    addObj(url: string, obj: any): void;
    getObj(url: string): any;
    addTexture(url: string, texture: Texture): void;
    getTexture(url: string): Texture;
    addGeometry(url: string, geo: GeometryBase): void;
    getGeometry(url: string): GeometryBase;
    addMat(name: string, mat: Material): Map<string, Material>;
    getMat(name: string): Material;
    addPrefab(name: string, rootScene: Object3D): void;
    getPrefab(name: string): Object3D;
    addAtlas(name: string, atlas: GUIAtlasTexture): void;
    getAtlas(name: string): GUIAtlasTexture;
    getGUISprite(id: string): GUISprite;
    load<T extends ParserBase>(url: string, c: Parser<T>, loaderFunctions?: LoaderFunctions): Promise<T["data"]>;
    loadGltf(url: string, loaderFunctions?: LoaderFunctions): Promise<Object3D>;
    loadObj(url: string, loaderFunctions?: LoaderFunctions): Promise<Object3D>;
    loadB3DM(url: string, loaderFunctions?: LoaderFunctions, userData?: any): Promise<Object3D>;
    loadI3DM(url: string, loaderFunctions?: LoaderFunctions, userData?: any): Promise<Object3D>;
    loadTexture(url: string, loaderFunctions?: LoaderFunctions, flipY?: boolean): Promise<Texture>;
    private loadTextureCount;
    loadBitmapTextures(urls: string[], count?: number, loaderFunctions?: LoaderFunctions, flipY?: boolean): Promise<BitmapTexture2D[]>;
    loadHDRTexture(url: string, loaderFunctions?: LoaderFunctions): Promise<Texture>;
    loadHDRTextureCube(url: string, loaderFunctions?: LoaderFunctions): Promise<Texture>;
    loadLDRTextureCube(url: string, loaderFunctions?: LoaderFunctions): Promise<Texture>;
    loadTextureCubeMaps(urls: string[]): Promise<Texture>;
    loadTextureCubeStd(url: string, loaderFunctions?: LoaderFunctions): Promise<Texture>;
    loadJSON(url: string, loaderFunctions?: LoaderFunctions): Promise<void | object>;
    loadFont(url: string, loaderFunctions?: LoaderFunctions, userData?: any): Promise<FontInfo>;
    loadAtlas(url: string, loaderFunctions?: LoaderFunctions): Promise<FontInfo>;
    normalTexture: Uint8ArrayTexture;
    maskTexture: Uint8ArrayTexture;
    whiteTexture: Uint8ArrayTexture;
    blackTexture: Uint8ArrayTexture;
    redTexture: Uint8ArrayTexture;
    blueTexture: Uint8ArrayTexture;
    greenTexture: Uint8ArrayTexture;
    yellowTexture: Uint8ArrayTexture;
    grayTexture: Uint8ArrayTexture;
    defaultSky: HDRTextureCube;
    defaultGUITexture: GUITexture;
    defaultGUISprite: GUISprite;
    defaultMaterial: LitMaterial;
    createTexture(width: number, height: number, r: number, g: number, b: number, a: number, name?: string): Uint8ArrayTexture;
    fillColor(array: any, w: number, h: number, r: number, g: number, b: number, a: number): void;
    initDefault(): void;
}
