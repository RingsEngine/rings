import { IComponent } from "../../components/IComponent";
import { RenderNode } from "../../components/renderer/RenderNode";
import { Transform } from "../../components/Transform";
import { CEventDispatcher } from "../../event/CEventDispatcher";
import { IBound } from "../bound/IBound";
import { Object3D } from "./Object3D";
export declare class Entity extends CEventDispatcher {
    name: string;
    protected readonly _instanceID: string;
    private _numChildren;
    get instanceID(): string;
    transform: Transform;
    renderNode: RenderNode;
    entityChildren: Entity[];
    components: Map<any, IComponent>;
    protected waitDisposeComponents: IComponent[];
    protected _bound: IBound;
    protected _boundWorld: IBound;
    protected _isBoundChange: boolean;
    private _dispose;
    get dispose(): boolean;
    getObjectByName(name: string): Entity;
    constructor();
    get numChildren(): number;
    addChild(child: Entity): Entity;
    removeChild(child: Entity): void;
    removeAllChild(): void;
    removeSelf(): this;
    removeChildByIndex(index: number): void;
    hasChild(child: Entity): boolean;
    removeFromParent(): this;
    getChildByIndex(index: number): Entity;
    getChildByName(name: string, loopChild?: boolean): any;
    update(): void;
    instantiate(): Object3D | null;
    protected onTransformLocalChange(e: any): void;
    get bound(): IBound;
    set bound(value: IBound);
    private updateBound;
    waitUpdate(): void;
    noticeComponents(key: keyof IComponent, data: any): void;
    destroy(force?: boolean): void;
}
