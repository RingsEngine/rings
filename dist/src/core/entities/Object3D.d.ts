import { Transform } from "../../components/Transform";
import { Quaternion } from "../../math/Quaternion";
import { Vector3 } from "../../math/Vector3";
import { Entity } from "./Entity";
import { Ctor } from "../../util/Global";
import { IComponent } from "../../components/IComponent";
import { SerializeTag } from "../../util/SerializeDecoration";
import { Color } from "../../math/Color";
export declare class Object3D extends Entity {
    protected _isScene3D: boolean;
    prefabRef?: string;
    serializeTag?: SerializeTag;
    constructor();
    get isScene3D(): boolean;
    forChild(call: Function): void;
    addComponent<T extends IComponent>(c: Ctor<T>, param?: any): T;
    getOrAddComponent<T extends IComponent>(c: Ctor<T>): T;
    removeComponent<T extends IComponent>(c: Ctor<T>): void;
    hasComponent<T extends IComponent>(c: Ctor<T>): boolean;
    getComponent<T extends IComponent>(c: Ctor<T>): T;
    getComponentFromParent<T extends IComponent>(c: Ctor<T>): T;
    getComponentsInChild<T extends IComponent>(c: Ctor<T>): T[];
    getComponents<T extends IComponent>(c: Ctor<T>, outList?: Array<T>, includeInactive?: boolean): T[];
    getComponentsExt<T extends IComponent>(c: Ctor<T>, ret?: T[], includeInactive?: boolean): T[];
    getComponentsByProperty<T extends IComponent>(key: string, value: any, findedAndBreak?: boolean, ret?: T[], includeInactive?: boolean): T[];
    clone(): Object3D;
    instantiate(): Object3D;
    get localPosition(): Vector3;
    set localPosition(value: Vector3);
    get localRotation(): Vector3;
    set localRotation(value: Vector3);
    get localScale(): Vector3;
    set localScale(value: Vector3);
    get localQuaternion(): Quaternion;
    set localQuaternion(value: Quaternion);
    notifyChange(): void;
    get parent(): Transform;
    get parentObject(): Object3D;
    set x(value: number);
    get x(): number;
    set y(value: number);
    get y(): number;
    set z(value: number);
    get z(): number;
    set scaleX(value: number);
    get scaleX(): number;
    set scaleY(value: number);
    get scaleY(): number;
    set scaleZ(value: number);
    get scaleZ(): number;
    set rotationX(value: number);
    get rotationX(): number;
    set rotationY(value: number);
    get rotationY(): number;
    set rotationZ(value: number);
    get rotationZ(): number;
    protected fixedUpdate(): void;
    protected lateUpdate(): void;
    traverse(callback: (child: any) => void): void;
    destroy(force?: boolean): void;
}
export interface IObject3DForPropertyAnim {
    materialColor: Color;
    notifyMaterialColorChange(materialIndex: number, key: string): any;
    active: number;
}
