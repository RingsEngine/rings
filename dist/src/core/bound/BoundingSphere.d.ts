import { Frustum } from "./Frustum";
import { IBound } from "./IBound";
import { Object3D } from "../entities/Object3D";
import { Ray } from "../../math/Ray";
import { Vector3 } from "../../math/Vector3";
export declare class BoundingSphere implements IBound {
    center: Vector3;
    extents: Vector3;
    max: Vector3;
    min: Vector3;
    size: Vector3;
    tmpVecA: Vector3;
    tmpVecB: Vector3;
    tmpVecC: Vector3;
    tmpVecD: Vector3;
    radius: number;
    diffBetweenPoints: Vector3;
    owner: any;
    forward: Vector3;
    worldCenter: Vector3;
    worldSize: Vector3;
    private _center;
    constructor(center?: Vector3, radius?: number);
    updateBound(): void;
    containsPoint(point: Vector3): boolean;
    intersectsRay(ray: Ray, point: Vector3): boolean;
    intersectsBoundingSphere(sphere: BoundingSphere): boolean;
    calculateTransform(obj: Object3D): void;
    inFrustum(obj: Object3D, frustum: Frustum): 1 | 0 | 2;
    clone(): IBound;
    update(obj: Object3D): void;
    merge(bound: IBound): void;
    setFromCenterAndSize(center: Vector3, size: number): void;
}
