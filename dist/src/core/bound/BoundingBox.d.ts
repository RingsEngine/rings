import { Frustum } from "./Frustum";
import { IBound } from "./IBound";
import { Object3D } from "../entities/Object3D";
import { Ray } from "../../math/Ray";
import { Vector3 } from "../../math/Vector3";
export declare class BoundingBox implements IBound {
    center: Vector3;
    extents: Vector3;
    max: Vector3;
    min: Vector3;
    size: Vector3;
    private static maxVector3;
    private static minVector3;
    constructor(center?: Vector3, size?: Vector3);
    makeEmpty(): this;
    setFromMinMax(min: Vector3, max: Vector3): this;
    private init;
    setFromCenterAndSize(center: Vector3, size: Vector3): this;
    inFrustum(obj: Object3D, frustum: Frustum): number;
    merge(bound: BoundingBox): void;
    intersects(bounds: IBound): boolean;
    intersectsSphere(sphere: IBound): boolean;
    intersectsBox(box: IBound): boolean;
    equals(bounds: IBound): boolean;
    expandByPoint(point: Vector3): void;
    static fromPoints(points: Vector3[]): BoundingBox;
    calculateTransform(obj: Object3D): void;
    clone(): IBound;
    intersectsRay(ray: Ray, point: Vector3): boolean;
    containsPoint(point: Vector3): boolean;
    containsBox(box: BoundingBox): boolean;
    updateBound(): void;
    destroy(force?: boolean): void;
}
