import { ArrayBufferData } from "./ArrayBufferData";
import { GPUBufferType } from "./GPUBufferType";
import { Color } from "../../../../../math/Color";
import { Matrix4 } from "../../../../../math/Matrix4";
import { Quaternion } from "../../../../../math/Quaternion";
import { Vector2 } from "../../../../../math/Vector2";
import { Vector3 } from "../../../../../math/Vector3";
import { Vector4 } from "../../../../../math/Vector4";
import { Struct } from "../../../../../util/struct/Struct";
import { MemoryDO } from "../../../../../core/pool/memory/MemoryDO";
import { MemoryInfo } from "../../../../../core/pool/memory/MemoryInfo";
import { FloatArray } from "@rings/wasm-matrix/WasmMatrix";
export declare class GPUBufferBase {
    bufferType: GPUBufferType;
    buffer: GPUBuffer;
    memory: MemoryDO;
    memoryNodes: Map<string | number, MemoryInfo>;
    seek: number;
    outFloat32Array: Float32Array;
    byteSize: number;
    usage: GPUBufferUsageFlags;
    visibility: number;
    protected mapAsyncBuffersOutstanding: number;
    protected mapAsyncReady: GPUBuffer[];
    private _readBuffer;
    private _dataView;
    constructor();
    debug(): void;
    reset(clean?: boolean, size?: number, data?: Float32Array): void;
    setBoolean(name: string, v: boolean): void;
    readBoole(name: string): boolean;
    setFloat(name: string, v: number): void;
    getFloat(name: string): number;
    setInt8(name: string, v: number): void;
    getInt8(name: string): number;
    setInt16(name: string, v: number): void;
    getInt16(name: string): number;
    setInt32(name: string, v: number): void;
    getInt32(name: string): number;
    setUint8(name: string, v: number): void;
    getUint8(name: string): number;
    setUint16(name: string, v: number): void;
    getUint16(name: string): number;
    setUint32(name: string, v: number): void;
    getUint32(name: string): number;
    setVector2(name: string, v2: Vector2): void;
    getVector2(name: string): Vector2;
    setVector3(name: string, v3: Vector3): void;
    getVector3(name: string): Vector3;
    setVector4(name: string, v4: Vector4 | Quaternion): void;
    getVector4(name: string): Vector4;
    setVector4Array(name: string, v4Array: Vector3[] | Vector4[] | Quaternion[]): void;
    setColor(name: string, color: Color): void;
    getColor(name: string): Color;
    setColorArray(name: string, colorArray: Color[]): void;
    setMatrix(name: string, mat: Matrix4): void;
    setMatrixArray(name: string, mats: Matrix4[]): void;
    setArray(name: string, data: number[]): void;
    setFloat32Array(name: string, data: Float32Array): void;
    setInt32Array(name: string, data: Int32Array): void;
    setUint32Array(name: string, data: Uint32Array): void;
    setStruct<T extends Struct>(c: {
        new (): T;
    }, index: number, data: any, property?: string): void;
    private writeValue;
    setStructArray<T extends Struct>(c: {
        new (): T;
    }, dataList: any[], property?: string): void;
    clean(): void;
    apply(): void;
    mapAsyncWrite(floatArray: FloatArray, len: number): void;
    destroy(force?: boolean): void;
    protected createBuffer(usage: GPUBufferUsageFlags, size: number, data?: ArrayBufferData, debugLabel?: string): void;
    resizeBuffer(size: number, data?: ArrayBufferData): void;
    protected createNewBuffer(usage: GPUBufferUsageFlags, size: number): GPUBuffer;
    protected createBufferByStruct<T extends Struct>(usage: GPUBufferUsageFlags, struct: {
        new (): T;
    }, count: number): void;
    readBuffer(): Float32Array;
    readBuffer(promise: false): Float32Array;
    readBuffer(promise: true): Promise<Float32Array>;
    private _readFlag;
    private read;
}
