export declare class Texture implements GPUSamplerDescriptor {
    name: string;
    url: string;
    protected gpuTexture: GPUTexture;
    pid: number;
    view: GPUTextureView | GPUExternalTexture;
    gpuSampler: GPUSampler;
    gpuSampler_comparison: GPUSampler;
    format: GPUTextureFormat;
    usage: GPUFlagsConstant;
    width: number;
    height: number;
    depthOrArrayLayers: number;
    numberLayer: number;
    viewDescriptor: GPUTextureViewDescriptor;
    textureDescriptor: GPUTextureDescriptor;
    visibility: number;
    textureBindingLayout: GPUTextureBindingLayout;
    samplerBindingLayout: GPUSamplerBindingLayout;
    sampler_comparisonBindingLayout: GPUSamplerBindingLayout;
    flipY: boolean;
    isVideoTexture?: boolean;
    isHDRTexture?: boolean;
    private _useMipmap;
    private _sourceImageData;
    private _addressModeU?;
    private _addressModeV?;
    private _addressModeW?;
    private _magFilter?;
    private _minFilter?;
    private _mipmapFilter?;
    private _lodMinClamp?;
    private _lodMaxClamp?;
    private _compare?;
    private _maxAnisotropy?;
    mipmapCount: number;
    protected _textureChange: boolean;
    constructor(width?: number, height?: number, numberLayer?: number);
    init(): this;
    protected createTextureDescriptor(width: number, height: number, mipLevelCount: number, format: GPUTextureFormat, usage?: number, sizeCount?: number, sampleCount?: number): void;
    protected generate(imageBitmap: HTMLCanvasElement | ImageBitmap | OffscreenCanvas): void;
    private createTexture;
    get useMipmap(): boolean;
    set useMipmap(value: boolean);
    get sourceImageData(): HTMLCanvasElement | ImageBitmap | OffscreenCanvas;
    getMipmapCount(): number;
    protected updateTextureDescription(): void;
    protected updateGPUTexture(): void;
    getGPUTexture(): GPUTexture;
    getGPUView(index?: number): GPUTextureView | GPUExternalTexture;
    protected _stateChangeRef: Map<any, Function>;
    bindStateChange(fun: Function, ref: any): void;
    unBindStateChange(ref: any): void;
    protected noticeChange(): void;
    destroy(force?: boolean): void;
    get addressModeU(): GPUAddressMode;
    set addressModeU(value: GPUAddressMode);
    get addressModeV(): GPUAddressMode;
    set addressModeV(value: GPUAddressMode);
    get addressModeW(): GPUAddressMode;
    set addressModeW(value: GPUAddressMode);
    get magFilter(): GPUFilterMode;
    set magFilter(value: GPUFilterMode);
    get minFilter(): GPUFilterMode;
    set minFilter(value: GPUFilterMode);
    get mipmapFilter(): GPUMipmapFilterMode;
    set mipmapFilter(value: GPUMipmapFilterMode);
    get lodMinClamp(): number;
    set lodMinClamp(value: number);
    get lodMaxClamp(): number;
    set lodMaxClamp(value: number);
    get compare(): GPUCompareFunction;
    set compare(value: GPUCompareFunction);
    get maxAnisotropy(): number;
    set maxAnisotropy(value: number);
    private static _texs;
    static delayDestroyTexture(tex: GPUTexture): void;
    static destroyTexture(): void;
}
