import { View3D } from "../../../core/View3D";
import { PickFire } from "../../../io/PickFire";
import { ColorPassRenderer } from "../passRenderer/color/ColorPassRenderer";
import { OcclusionSystem } from "../occlusion/OcclusionSystem";
import { ClusterLightingRender } from "../passRenderer/cluster/ClusterLightingRender";
import { PointLightShadowRenderer } from "../passRenderer/shadow/PointLightShadowRenderer";
import { ShadowMapPassRenderer } from "../passRenderer/shadow/ShadowMapPassRenderer";
import { PreDepthPassRenderer } from "../passRenderer/preDepth/PreDepthPassRenderer";
import { RendererMap } from "./RenderMap";
import { PostRenderer } from "../passRenderer/post/PostRenderer";
import { PostBase } from "../post/PostBase";
import { RendererBase } from "../passRenderer/RendererBase";
import { Ctor } from "../../../util/Global";
import { DDGIProbeRenderer } from "../passRenderer/ddgi/DDGIProbeRenderer";
import { ReflectionRenderer } from "../passRenderer/cubeRenderer/ReflectionRenderer";
export declare class RendererJob {
    rendererMap: RendererMap;
    shadowMapPassRenderer: ShadowMapPassRenderer;
    pointLightShadowRenderer: PointLightShadowRenderer;
    ddgiProbeRenderer: DDGIProbeRenderer;
    postRenderer: PostRenderer;
    clusterLightingRender: ClusterLightingRender;
    reflectionRenderer: ReflectionRenderer;
    occlusionSystem: OcclusionSystem;
    depthPassRenderer: PreDepthPassRenderer;
    get colorPassRenderer(): ColorPassRenderer;
    pauseRender: boolean;
    pickFire: PickFire;
    renderState: boolean;
    protected _view: View3D;
    constructor(view: View3D);
    addRenderer<T extends RendererBase>(c: Ctor<T>, param?: any): T;
    get view(): View3D;
    set view(view: View3D);
    start(): void;
    stop(): void;
    pause(): void;
    resume(): void;
    addPost(post: PostBase): PostBase | PostBase[];
    removePost(post: PostBase | PostBase[]): void;
    renderFrame(): void;
    debug(): void;
}
