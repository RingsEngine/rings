import { VirtualTexture } from "../../../textures/VirtualTexture";
import { StorageGPUBuffer } from "../../graphics/webGpu/core/buffer/StorageGPUBuffer";
import { ComputeShader } from "../../graphics/webGpu/shader/ComputeShader";
import { RendererPassState } from "../passRenderer/state/RendererPassState";
import { PostBase } from "./PostBase";
import { Matrix4 } from "../../../math/Matrix4";
import { RTFrame } from "../frame/RTFrame";
import { View3D } from "../../../core/View3D";
export declare class TAAPost extends PostBase {
    taaTexture: VirtualTexture;
    outTexture: VirtualTexture;
    rendererPassState: RendererPassState;
    taaCompute: ComputeShader;
    copyTexCompute: ComputeShader;
    sharpCompute: ComputeShader;
    taaSetting: StorageGPUBuffer;
    preColorBuffer: StorageGPUBuffer;
    preColorTex: VirtualTexture;
    preProjMatrix: Matrix4;
    preViewMatrix: Matrix4;
    rtFrame: RTFrame;
    constructor();
    onAttach(view: View3D): void;
    onDetach(view: View3D): void;
    get jitterSeedCount(): number;
    set jitterSeedCount(value: number);
    get blendFactor(): number;
    set blendFactor(value: number);
    get sharpFactor(): number;
    set sharpFactor(value: number);
    get sharpPreBlurFactor(): number;
    set sharpPreBlurFactor(value: number);
    get temporalJitterScale(): number;
    set temporalJitterScale(value: number);
    private createGUI;
    private createCompute;
    private createResource;
    render(view: View3D, command: GPUCommandEncoder): void;
    onResize(): void;
}
