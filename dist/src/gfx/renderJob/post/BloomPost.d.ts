import { UniformGPUBuffer } from "../../graphics/webGpu/core/buffer/UniformGPUBuffer";
import { ComputeShader } from "../../graphics/webGpu/shader/ComputeShader";
import { RendererPassState } from "../passRenderer/state/RendererPassState";
import { PostBase } from "./PostBase";
import { View3D } from "../../../core/View3D";
import { RTFrame } from "../frame/RTFrame";
import { VirtualTexture } from "../../../textures/VirtualTexture";
export declare class BloomPost extends PostBase {
    RT_BloomUp: VirtualTexture[];
    RT_BloomDown: VirtualTexture[];
    RT_threshold: VirtualTexture;
    rendererPassState: RendererPassState;
    thresholdCompute: ComputeShader;
    downSampleComputes: ComputeShader[];
    upSampleComputes: ComputeShader[];
    postCompute: ComputeShader;
    bloomSetting: UniformGPUBuffer;
    rtFrame: RTFrame;
    constructor();
    onAttach(view: View3D): void;
    onDetach(view: View3D): void;
    private createGUI;
    private removeGUI;
    get downSampleBlurSize(): number;
    set downSampleBlurSize(value: number);
    get downSampleBlurSigma(): number;
    set downSampleBlurSigma(value: number);
    get upSampleBlurSize(): number;
    set upSampleBlurSize(value: number);
    get upSampleBlurSigma(): number;
    set upSampleBlurSigma(value: number);
    get luminanceThreshole(): number;
    set luminanceThreshole(value: number);
    get bloomIntensity(): number;
    set bloomIntensity(value: number);
    get hdr(): number;
    set hdr(value: number);
    private createThreshouldCompute;
    private createDownSampleComputes;
    private createUpSampleComputes;
    private createPostCompute;
    private createResource;
    render(view: View3D, command: GPUCommandEncoder): void;
    onResize(): void;
}
