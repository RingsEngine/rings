import { Object3D } from "../core/entities/Object3D";
import { StorageGPUBuffer } from "../gfx/graphics/webGpu/core/buffer/StorageGPUBuffer";
import { ComponentBase } from "./ComponentBase";
import { Skeleton } from "./anim/skeletonAnim/Skeleton";
import { SkeletonAnimationClip } from "./anim/skeletonAnim/SkeletonAnimationClip";
import { SkeletonAnimationClipState } from "./anim/skeletonAnim/SkeletonAnimationClipState";
import { SkeletonPose } from "./anim/skeletonAnim/SkeletonPose";
export declare class SkeletonAnimationComponent extends ComponentBase {
    isPlaying: boolean;
    timeScale: number;
    protected _skeleton: Skeleton;
    protected _clips: SkeletonAnimationClip[];
    protected _clipStates: Map<string, SkeletonAnimationClipState>;
    protected _mixSkeletonPose: SkeletonPose;
    protected _mixTempSkeletonPose: SkeletonPose;
    protected _currentClipState: SkeletonAnimationClipState;
    protected _bindList: Array<any>;
    protected _jointMatrixIndexTableBuffer: StorageGPUBuffer;
    protected _crossFadeState: SkeletonAnimationCrossFadeState;
    constructor();
    start(): void;
    set skeleton(value: Skeleton);
    get skeleton(): Skeleton;
    get finalSkeletonPose(): SkeletonPose;
    get jointMatrixIndexTableBuffer(): StorageGPUBuffer;
    getJointIndexTable(skinJointsName: Array<string>): Array<number>;
    addAnimationClip(clip: SkeletonAnimationClip): void;
    getAnimationClip(name: string): SkeletonAnimationClip;
    getAnimationClips(): SkeletonAnimationClip[];
    getAnimationClipState(name: string): SkeletonAnimationClipState;
    getAnimationClipStates(): Map<string, SkeletonAnimationClipState>;
    pause(): void;
    resume(): void;
    play(animName: string, speed?: number, reset?: boolean): boolean;
    crossFade(animName: string, crossTime: number): void;
    setAnimIsLoop(animName: string, isLoop: boolean): void;
    addJointBind(jointName: string, obj: Object3D): void;
    removeJointBind(obj: Object3D): void;
    onUpdate(): void;
    cloneTo(obj: Object3D): void;
    protected setCurrentClipState(clipState: SkeletonAnimationClipState): void;
}
declare class SkeletonAnimationCrossFadeState {
    inClip: SkeletonAnimationClipState;
    outClip: SkeletonAnimationClipState;
    currentTime: number;
    crossFadeTime: number;
    constructor(inClip: SkeletonAnimationClipState, outClip: SkeletonAnimationClipState, time: number);
    reset(inClip: SkeletonAnimationClipState, outClip: SkeletonAnimationClipState, time: number): void;
    update(delta: number): void;
}
export {};
