import { Camera3D } from "../../core/Camera3D";
import { View3D } from "../../core/View3D";
import { Object3D } from "../../core/entities/Object3D";
import { Vector3 } from "../../math/Vector3";
import { ComponentBase } from "../ComponentBase";
export declare class HoverCameraController extends ComponentBase {
    camera: Camera3D;
    minDistance: number;
    maxDistance: number;
    rollSmooth: number;
    dragSmooth: number;
    wheelSmooth: number;
    wheelStep: number;
    mouseRightFactor: number;
    mouseLeftFactor: number;
    smooth: boolean;
    private _wheelStep;
    private _distance;
    distance: number;
    private _roll;
    roll: number;
    private _pitch;
    pitch: number;
    private _currentPos;
    private _targetPos;
    private _flowTarget;
    private _flowOffset;
    private _mouseLeftDown;
    private _mouseRightDown;
    private _bottomClamp;
    private _topClamp;
    get bottomClamp(): number;
    set bottomClamp(value: number);
    get topClamp(): number;
    set topClamp(value: number);
    private _tempDir;
    private _tempPos;
    constructor();
    start(): void;
    flowTarget(target: Object3D, offset?: Vector3): void;
    getFlowTarget(): Object3D;
    setCamera(roll: number, pitch: number, distance: number, target?: Vector3): void;
    focusByBounds(obj: Object3D): void;
    set target(target: Vector3);
    get target(): Vector3;
    private onMouseWheel;
    private onMouseDown;
    private onMouseUp;
    private onMouseMove;
    onBeforeUpdate(view?: View3D): void;
    destroy(force?: boolean): void;
}
