import { View3D } from "../core/View3D";
import { Object3D } from "../core/entities/Object3D";
import { CEventDispatcher } from "../event/CEventDispatcher";
import { IComponent } from "./IComponent";
import { Transform } from "./Transform";
export declare class ComponentBase implements IComponent {
    object3D: Object3D;
    protected _eventDispatcher: CEventDispatcher;
    get eventDispatcher(): CEventDispatcher;
    set eventDispatcher(value: CEventDispatcher);
    protected _enable: boolean;
    private __isStart;
    isDestroyed: boolean;
    get isStart(): boolean;
    get transform(): Transform;
    set enable(value: boolean);
    get enable(): boolean;
    private __init;
    private __start;
    private __stop;
    init(param?: any): void;
    start(): void;
    stop(): void;
    onEnable?(view?: View3D): any;
    onDisable?(view?: View3D): any;
    onUpdate?(view?: View3D): any;
    onLateUpdate?(view?: View3D): any;
    onBeforeUpdate?(view?: View3D): any;
    onCompute?(view?: View3D, command?: GPUCommandEncoder): any;
    onGraphic?(view?: View3D): any;
    onParentChange?(lastParent?: Object3D, currentParent?: Object3D): any;
    onAddChild?(child: Object3D): any;
    onRemoveChild?(child: Object3D): any;
    cloneTo(obj: Object3D): void;
    copyComponent(from: this): this;
    private _onUpdate;
    private _onLateUpdate;
    private _onBeforeUpdate;
    private _onCompute;
    private _onGraphic;
    beforeDestroy(force?: boolean): void;
    destroy(force?: boolean): void;
}
