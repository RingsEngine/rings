import { Scene3D } from "../core/Scene3D";
import { View3D } from "../core/View3D";
import { Object3D } from "../core/entities/Object3D";
import { CEvent } from "../event/CEvent";
import { Matrix4 } from "../math/Matrix4";
import { Quaternion } from "../math/Quaternion";
import { Vector3 } from "../math/Vector3";
import { ComponentBase } from "./ComponentBase";
export declare class Transform extends ComponentBase {
    static LIMIT: number;
    static COMPONENT_NAME: string;
    static COMPONENT_TYPE: string;
    static POSITION_ONCHANGE: string;
    static ROTATION_ONCHANGE: string;
    static SCALE_ONCHANGE: string;
    static PARENT_ONCHANGE: string;
    static CHILDREN_ONCHANGE: string;
    static ADD_ONCHANGE: string;
    static LOCAL_ONCHANGE: string;
    eventPositionChange: CEvent;
    eventRotationChange: CEvent;
    eventScaleChange: CEvent;
    eventLocalChange: CEvent;
    onPositionChange: Function;
    onRotationChange: Function;
    onScaleChange: Function;
    private _scene3d;
    private _parent;
    private _localPos;
    _localRot: Vector3;
    private _localRotQuat;
    private _localScale;
    private _localDetailPos;
    private _localDetailRot;
    private _localDetailScale;
    index: number;
    index2: number;
    private _forward;
    private _back;
    private _right;
    private _left;
    private _up;
    private _down;
    readonly _worldMatrix: Matrix4;
    private _targetPos;
    static: boolean;
    depthOrder: number;
    get localChange(): boolean;
    set localChange(value: boolean);
    get targetPos(): Vector3;
    set targetPos(value: Vector3);
    get parent(): Transform;
    set parent(value: Transform);
    set enable(value: boolean);
    get enable(): boolean;
    get scene3D(): Scene3D;
    set scene3D(value: Scene3D);
    get view3D(): View3D;
    constructor();
    awake(): void;
    start(): void;
    stop(): void;
    notifyLocalChange(): void;
    get up(): Vector3;
    set up(value: Vector3);
    get down(): Vector3;
    set down(value: Vector3);
    get forward(): Vector3;
    set forward(value: Vector3);
    get back(): Vector3;
    set back(value: Vector3);
    get left(): Vector3;
    set left(value: Vector3);
    get right(): Vector3;
    set right(value: Vector3);
    get localRotQuat(): Quaternion;
    set localRotQuat(value: Quaternion);
    notifyChange(): void;
    get worldMatrix(): Matrix4;
    updateWorldMatrix(force?: boolean): void;
    updateChildTransform(): void;
    lookTarget(target: Vector3, up?: Vector3): void;
    lookAt(pos: Vector3, target: Vector3, up?: Vector3): void;
    decomposeFromMatrix(matrix: Matrix4, orientationStyle?: string): this;
    cloneTo(obj: Object3D): void;
    set x(value: number);
    get x(): number;
    set y(value: number);
    get y(): number;
    set z(value: number);
    get z(): number;
    set scaleX(value: number);
    get scaleX(): number;
    set scaleY(value: number);
    get scaleY(): number;
    set scaleZ(value: number);
    get scaleZ(): number;
    set rotationX(value: number);
    get rotationX(): number;
    set rotationY(value: number);
    get rotationY(): number;
    set rotationZ(value: number);
    get rotationZ(): number;
    get worldPosition(): Vector3;
    set localPosition(v: Vector3);
    get localPosition(): Vector3;
    set localRotation(v: Vector3);
    get localRotation(): Vector3;
    set localScale(v: Vector3);
    get localScale(): Vector3;
    get localDetailScale(): Vector3;
    set localDetailScale(value: Vector3);
    get localDetailRot(): Vector3;
    set localDetailRot(value: Vector3);
    get localDetailPos(): Vector3;
    set localDetailPos(value: Vector3);
    beforeDestroy(force?: boolean): void;
    destroy(): void;
}
