import { Color } from "./Color";
import { Matrix4 } from "./Matrix4";
import { Quaternion } from "./Quaternion";
import { Rand } from "./Rand";
import { Vector2 } from "./Vector2";
import { Vector3 } from "./Vector3";
export declare let RADIANS_TO_DEGREES: number;
export declare let DEGREES_TO_RADIANS: number;
export declare let MAX_VALUE: number;
export declare let MIN_VALUE: number;
export declare function clamp(value: any, min: any, max: any): number;
export declare class MathUtil {
    private static gaussFunction;
    private static computeGaussian;
    private static gaussCoef;
    static clampf(value: number, min_inclusive: number, max_inclusive: number): number;
    static normalizeAngle(a: number): number;
    static fract(v: number): number;
    static getRandDirXZ(r: number): {
        x: number;
        z: number;
    };
    static getRandDirXYZ(r: number): Vector3;
    static getCycleXYZ(r: number): Vector3;
    static angle(p1: Vector3, p2: Vector3): number;
    static angle_360(from: Vector3, to: Vector3): number;
    getRotationY(v: Vector3): number;
    static fromToRotation(fromDirection: Vector3, toDirection: Vector3, target?: Quaternion): Quaternion;
    static getEularDir_yUp(v: number): Vector3;
    static transformVector(matrix: Matrix4, vector: Vector3, result?: Vector3): Vector3;
}
export declare let lerp: (v0: number, v1: number, t: number) => number;
export declare function lerpVector3(v0: Vector3, v1: Vector3, t: number): Vector3;
export declare function lerpColor(c0: Color, c1: Color, t: any): Color;
export declare function lerpByte(u0: any, u1: any, scale: any): number;
export declare let PingPong: (t: number, start: number, end: number) => number;
export declare let RepeatSE: (t: number, start: number, end: number) => number;
export declare let GetRepeat: (datas: any[], element: any) => number;
export declare class RandomSeed {
    x: number;
    y: number;
    z: number;
    w: number;
    randSeedList: number[];
    constructor();
    reset(): void;
}
export declare function dot(lhs: Vector2 | Quaternion | Vector3, rhs: Vector2 | Quaternion | Vector3): number;
export declare function scale(lhs: Vector3, rhs: Vector3): Vector3;
export declare function sqrtImpl(f: number): number;
export declare function magnitude(inV: Vector2 | Vector3 | Quaternion): number;
export declare function normalizeSafe(inV: Vector2 | Vector3 | Quaternion, defaultV?: Vector2 | Vector3 | Quaternion): Vector2 | Vector3 | Quaternion;
export declare function getFloatFromInt(value: any): number;
export declare function random01(value: any): any;
export declare function rangedRandomFloat(r: Rand, min: number, max: number): number;
export declare function rangedRandomInt(r: Rand, min: number, max: number): number;
export declare function randomUnitVector(rand: Rand): Vector3;
export declare function randomUnitVector2(rand: Rand): Vector2;
export declare function randomQuaternion(rand: Rand): number | Quaternion;
export declare function randomQuaternionUniformDistribution(rand: Rand): number | Quaternion;
export declare function randomPointInsideCube(r: Rand, extents: Vector3): Vector3;
export declare function randomPointInsideUnitSphere(r: Rand): Vector3;
export declare function randomPointInsideEllipsoid(r: Rand, extents: Vector3): Vector3;
export declare function randomPointBetweenSphere(r: Rand, minRadius: number, maxRadius: number): Vector3;
export declare function randomPointInsideUnitCircle(r: Rand): Vector2;
export declare function randomPointBetweenEllipsoid(r: Rand, maxExtents: Vector3, minRange: number): Vector3;
export declare function randomBarycentricCoord(rand: Rand): Vector3;
export declare function deg2Rad(deg: any): number;
export declare function rad2Deg(deg: any): number;
export declare function sin(v: number): number;
export declare function cos(v: number): number;
export declare let randomSeed: number;
export declare function getGlobalRandomSeed(): number;
export declare function swap(values: any[], i1: number, i2: number): void;
export declare function floorfToIntPos(f: any): number;
export declare function roundfToIntPos(f: any): number;
export declare function normalizedToWord(f: any): number;
export declare function normalizedToByte(f: any): number;
export declare function fastInvSqrt(f: any): any;
export declare function normalizeFast(inV: Vector3): Vector3;
export declare function crossProduct(lhs: Vector3, rhs: Vector3): Vector3;
export declare function sqrMagnitude(inV: Vector3): number;
export declare function generateRandom(randomIn: any): any;
export declare function generateRandom3(randomOut: Vector3, randomIn: number): void;
export declare function clampRepeat(t: any, t0: any, t1: any): any;
export declare function repeat(t: any, length: any): number;
