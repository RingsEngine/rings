export declare class Vector2 {
    static HELP_0: Vector2;
    static HELP_1: Vector2;
    static HELP_2: Vector2;
    static readonly ZERO: Vector2;
    static readonly SAFE_MAX: Vector2;
    static readonly SAFE_MIN: Vector2;
    x: number;
    y: number;
    constructor(x?: number, y?: number);
    static getAngle(a: Vector2, b: Vector2): number;
    static slerp(from: Vector2, to: Vector2, t: number): Vector2;
    static lerp(from: Vector2, to: Vector2, t: number): Vector2;
    set(x?: number, y?: number): this;
    distance(a: Vector2): number;
    add(a: Vector2, target?: Vector2): Vector2;
    sub(a: Vector2, target?: Vector2): Vector2;
    scale(v: number): this;
    multiply(a: number, target?: Vector2): Vector2;
    multiplyScaler(a: number): this;
    divide(v: number, target?: Vector2): Vector2;
    neg(target?: Vector2): Vector2;
    abs(): number;
    length(): number;
    getAngle(target: Vector2): number;
    unt(target?: Vector2): Vector2;
    angleTo(v: Vector2): number;
    equals(a: Vector2): boolean;
    pal(a: Vector2): number;
    clone(): Vector2;
    copyFrom(v: Vector2): Vector2;
    addScaledVector(v: Vector2, size: number): Vector2;
    dot(value: Vector2): number;
    normalize(): this;
    addInPlace(otherVector: Vector2): this;
    addScalar(s: number): this;
    clampScalar(minVal: number, maxVal: number): this;
}
