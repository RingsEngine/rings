////////////////////////////////////////
/// Only considering M30T model for now
////////////////////////////////////////

import {
  ExecuteRCLostAction,
  ExitOnRCLost,
  FinishAction,
  FlyToWaypointType,
  WaypointHeadingMode,
  WaypointHeadingPathMode
} from './global'
import { PointType } from './point'

/**
 * @description
 * - [`template.kml`](https://developer.dji.com/doc/cloud-api-tutorial/en/api-reference/dji-wpml/template-kml.html) file consists of three parts:
 * 1. Creation information: Mainly contains information about the wayline file itself, such as file creation and update time.
 * 2. Mission information: Mainly contains `wpml:missionConfig` element, defining global parameters for wayline missions.
 * 3. Template information: Mainly contains `Folder` element, defining wayline template information (such as waypoint flight, mapping aerial photography, oblique photography, strip flight, etc.). Different wayline template types contain different elements.
 */
export interface TemplateFile {
  /**
   * File creation author
   */
  author?: string
  /**
   * File creation time (Unix Timestamp)
   * - ms
   */
  createTime?: string
  /**
   * File update time (Unix Timestamp)
   * - ms
   */
  updateTime?: string
  /**
   * Template information
   */
  Folder: {
    /**
     * Waypoint information (including waypoint longitude, latitude and height, etc.)
     */
    Placemark?: Array<PointType>
    /**
     * Global wayline flight speed
     * - m/s
     * - [1,15]
     * - Note: This element defines the target flight speed of the aircraft in the entire wayline generated by this template. If this element is additionally defined for a waypoint, the local definition will override the global definition.
     */
    autoFlightSpeed: string
    caliFlightEnable: string
    /**
     * Gimbal pitch angle control mode
     */
    gimbalPitchMode: GimbalPitchMode
    /**
     * Global wayline height (relative to takeoff point height)
     * - m
     */
    globalHeight: string
    /**
     * Whether global segment trajectory should closely follow straight lines
     * - `0`: Segment trajectory is curved throughout
     * - `1`: Segment trajectory closely follows straight line between two points
     * - Note: Required only when `wpml:globalWaypointTurnMode` is set to `toPointAndStopWithContinuityCurvature` or `toPointAndPassWithContinuityCurvature`. If this element is additionally defined for a waypoint, the local definition will override the global definition.
     */
    globalUseStraightLine: '0' | '1'
    /**
     * Global waypoint heading mode parameters
     */
    globalWaypointHeadingParam: {
      /**
       * Aircraft yaw angle
       * - °
       * - Set target yaw angle for a waypoint and smoothly transition to the next waypoint's target yaw angle during flight.
       * - Note: Required only when `wpml:waypointHeadingMode` is `smoothTransition`
       */
      waypointHeadingAngle: string
      /**
       * Aircraft yaw angle mode
       */
      waypointHeadingMode: WaypointHeadingMode
      /**
       * Aircraft yaw angle rotation direction
       */
      waypointHeadingPathMode: WaypointHeadingPathMode
    }
    /**
     * Global waypoint type (global waypoint turn mode)
     */
    globalWaypointTurnMode: GlobalWaypointTurnMode
    /**
     * Payload settings
     */
    payloadParam: {
      /**
       * Payload focus mode
       * - `firstPoint`: Auto focus at first waypoint
       * - `custom`: Focus with calibrated focus value
       */
      focusMode: 'firstPoint' | 'custom'
      /**
       * Image format list
       * - `wide`: Store wide-angle lens photos
       * - `zoom`: Store zoom lens photos
       * - `ir`: Store infrared lens photos
       * - `narrow_band`: Store narrow-band lens photos
       * - Note: To store multiple lens photos, format like `<wpml:imageFormat>wide,ir</wpml:imageFormat>`
       */
      imageFormat: string
      /**
       * Payload metering mode
       * - `average`: Global metering
       * - `spot`: Spot metering
       */
      meteringMode: 'average' | 'spot'
      /**
       * Payload mounting position
       * - `0`: Aircraft mounting position 1. For M300 RTK, M350 RTK models, corresponds to front left of fuselage. For other models, corresponds to main gimbal.
       * - `1`: Aircraft mounting position 2. For M300 RTK, M350 RTK models, corresponds to front right of fuselage.
       * - `2`: Aircraft mounting position 3. For M300 RTK, M350 RTK models, corresponds to top of fuselage.
       */
      payloadPositionIndex: '0'
      /**
       * LiDAR return mode
       * - `singleReturnStrongest`: Single return
       * - `dualReturn`: Dual return
       * - `tripleReturn`: Triple return
       */
      returnMode: 'singleReturnStrongest' | 'dualReturn' | 'tripleReturn'
      /**
       * Payload sampling rate
       * - Hz
       * - 60000,80000,120000,160000,180000,240000
       */
      samplingRate: string
      /**
       * Payload scanning mode
       * - `repetitive`: Repetitive scanning
       * - `nonRepetitive`: Non-repetitive scanning
       */
      scanningMode: 'repetitive' | 'nonRepetitive'
    }
    /**
     * Template ID
     * - [0, 65535]
     * - integer
     * - Note: This ID must be unique within a kmz file. It is recommended to start from 0 and increment monotonically. In template.kml and waylines.wpml files, this id will be used to associate the template with the generated executable wayline.
     */
    templateId: string
    /**
     * Predefined template type
     * - Note: Templates provide users with a quick way to generate waylines. Users fill in template elements and import them into DJI-supported clients (such as DJI Pilot) to quickly generate executable mapping/inspection waylines.
     */
    templateType: TemplateType
    /**
     * Coordinate system parameters
     */
    waylineCoordinateSysParam: {
      /**
       * Longitude and latitude coordinate system
       * - `WGS84`: Currently fixed to use WGS84 coordinate system
       */
      coordinateMode: 'WGS84'
      /**
       * Waypoint elevation reference plane
       * - `EGM96`: Use altitude height editing
       * - `relativeToStartPoint`: Use relative point height for editing
       * - `aboveGroundLevel`: Use terrain data, AGL editing (only supported on 司空2 platform)
       * - `realTimeFollowSurface`: Use real-time terrain following mode (only for mapping aerial photography template), only supports M3E/M3T/M3M models
       */
      heightMode: 'EGM96' | 'relativeToStartPoint' | 'aboveGroundLevel' | 'realTimeFollowSurface'
    }
  },
  /**
   * Mission information
   */
  missionConfig: {
    /**
     * Aircraft model information
     * @example 67 - 1 | M30T triple camera
     */
    droneInfo: {
      /**
       * Aircraft model main type
       * - `89` (Model: M350 RTK),
       * - `60` (Model: M300 RTK),
       * - `67` (Model: M30/M30T),
       * - `77` (Model: M3E/M3T/M3M),
       * - `91` (Model: M3D/M3TD)
       */
      droneEnumValue: string
      /**
       * Aircraft model sub type
       * - When `aircraft model main type` is `67` (Model: M30/M30T):
       *   - `0` (Model: M30 dual camera),
       *   - `1` (Model: M30T triple camera)
       * - When `aircraft model main type` is `77` (Model: M3E/M3T/M3M):
       *   - `0` (Model: M3E)
       *   - `1` (Model: M3T)
       *   - `2` (Model: M3M)
       * - When `aircraft model main type` is `91` (Model: M3D/M3TD):
       *   - `0` (Model: M3D)
       *   - `1` (Model: M3TD)
       */
      droneSubEnumValue: string
    }
    /**
     * Lost control action type
     */
    executeRCLostAction: ExecuteRCLostAction
    /**
     * Whether to continue wayline execution when lost control
     */
    exitOnRCLost: ExitOnRCLost
    /**
     * Wayline end action
     */
    finishAction: FinishAction
    /**
     * Fly to first waypoint mode
     */
    flyToWaylineMode: FlyToWaypointType
    /**
     * Global return home height
     * - m
     * - Note: When aircraft returns home, it first climbs to this height, then returns home.
     */
    globalRTHHeight: string
    /**
     * Global wayline transition speed
     * - m/s
     * - [1,15]
     * - Note: Speed of aircraft flying to the first waypoint of each wayline. Speed of aircraft recovering from current position to breakpoint when wayline mission is interrupted.
     */
    globalTransitionalSpeed: string
    /**
     * Payload model information
     * @example 53 - 0 | M30T triple camera, mounted on main gimbal
     */
    payloadInfo: {
      /**
       * Payload model main type
       * - `42` (H20),
       * - `43` (H20T),
       * - `52` (M30 dual camera),
       * - `53` (M30T triple camera),
       * - `61` (H20N),
       * - `66` (Mavic 3E camera)
       * - `67` (Mavic 3T camera)
       * - `68` (Mavic 3M camera)
       * - `80` (Matrice 3D camera)
       * - `81` (Matrice 3TD camera)
       * - `65534` (PSDK payload)
       */
      payloadEnumValue: string
      /**
       * Payload mounting position
       * - `0`: Aircraft mounting position 1. For M300 RTK, M350 RTK models, corresponds to front left of fuselage. For other models, corresponds to main gimbal.
       * - `1`: Aircraft mounting position 2. For M300 RTK, M350 RTK models, corresponds to front right of fuselage.
       * - `2`: Aircraft mounting position 3. For M300 RTK, M350 RTK models, corresponds to top of fuselage.
       */
      payloadPositionIndex: string
      payloadSubEnumValue: string
    }
    /**
     * Reference takeoff point <x,y,z>
     * - °, °, m
     * - [-90,90],[-180,180], height unlimited
     * - Note: "Reference takeoff point" is only for wayline planning reference. When aircraft executes wayline, it uses the actual takeoff point of the aircraft, and uses ellipsoid height.
     */
    takeOffRefPoint?: string
    /**
     * Reference takeoff point altitude height
     * - m
     * - Note: Altitude height of "reference takeoff point", corresponding to the ellipsoid height in "reference takeoff point".
     */
    takeOffRefPointAGLHeight?: string
    /**
     * Safe takeoff height inclined flight mode
     * (M300) Aircraft takes off and flies inclined to first waypoint.
     * (M30) Aircraft takes off to "safe takeoff height", then climbs inclined to first waypoint. If first waypoint height is lower than "safe takeoff height", fly horizontally first then descend.
     * - m
     * - [2, 1500] (Height mode: relative to takeoff point height)
     * - Note: After aircraft takes off, it first climbs to this height, then flies to first waypoint according to "fly to first waypoint mode" settings. This element only takes effect when aircraft has not taken off.
     */
    takeoffSecurityHeight: string
  }
}

/**
 * Predefined template type
 * - `waypoint` Waypoint flight
 * - `mapping2d` Mapping aerial photography
 * - `mapping3d` Oblique photography
 * - `mappingStrip` Strip flight
 */
export type TemplateType =
  'waypoint'
  | 'mapping2d'
  | 'mapping3d'
  | 'mappingStrip'

/**
 * Global waypoint type (global waypoint turn mode)
 * - `coordinateTurn` Coordinated turn, no waypoint passing, early turn
 * - `toPointAndStopWithDiscontinuityCurvature` Straight flight, aircraft stops at waypoint
 * - `toPointAndStopWithContinuityCurvature` Curved flight, aircraft stops at waypoint
 * - `toPointAndPassWithContinuityCurvature` Curved flight, aircraft passes waypoint without stopping
 */
export type GlobalWaypointTurnMode =
  'coordinateTurn'
  | 'toPointAndStopWithDiscontinuityCurvature'
  | 'toPointAndStopWithContinuityCurvature'
  | 'toPointAndPassWithContinuityCurvature'

/**
 * Gimbal pitch angle control mode
 * - `manual` Manual control. During flight from one waypoint to the next, supports user manual control of gimbal pitch angle. If no user control, maintains the gimbal pitch angle when leaving the waypoint.
 * - `usePointSetting` Follow each waypoint setting. During flight from one waypoint to the next, gimbal pitch angle smoothly transitions to the next waypoint's pitch angle.
 */
export type GimbalPitchMode = 'manual' | 'usePointSetting'
